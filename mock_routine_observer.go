// Code generated by MockGen. DO NOT EDIT.
// Source: async.go

// Package async is a generated GoMock package.
package async

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoutinesObserver is a mock of RoutinesObserver interface.
type MockRoutinesObserver struct {
	ctrl     *gomock.Controller
	recorder *MockRoutinesObserverMockRecorder
}

// MockRoutinesObserverMockRecorder is the mock recorder for MockRoutinesObserver.
type MockRoutinesObserverMockRecorder struct {
	mock *MockRoutinesObserver
}

// NewMockRoutinesObserver creates a new mock instance.
func NewMockRoutinesObserver(ctrl *gomock.Controller) *MockRoutinesObserver {
	mock := &MockRoutinesObserver{ctrl: ctrl}
	mock.recorder = &MockRoutinesObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutinesObserver) EXPECT() *MockRoutinesObserverMockRecorder {
	return m.recorder
}

// RoutineExceededTimebox mocks base method.
func (m *MockRoutinesObserver) RoutineExceededTimebox(routine AsyncRoutine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RoutineExceededTimebox", routine)
}

// RoutineExceededTimebox indicates an expected call of RoutineExceededTimebox.
func (mr *MockRoutinesObserverMockRecorder) RoutineExceededTimebox(routine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutineExceededTimebox", reflect.TypeOf((*MockRoutinesObserver)(nil).RoutineExceededTimebox), routine)
}

// RoutineFinished mocks base method.
func (m *MockRoutinesObserver) RoutineFinished(routine AsyncRoutine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RoutineFinished", routine)
}

// RoutineFinished indicates an expected call of RoutineFinished.
func (mr *MockRoutinesObserverMockRecorder) RoutineFinished(routine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutineFinished", reflect.TypeOf((*MockRoutinesObserver)(nil).RoutineFinished), routine)
}

// RoutineStarted mocks base method.
func (m *MockRoutinesObserver) RoutineStarted(routine AsyncRoutine) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RoutineStarted", routine)
}

// RoutineStarted indicates an expected call of RoutineStarted.
func (mr *MockRoutinesObserverMockRecorder) RoutineStarted(routine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutineStarted", reflect.TypeOf((*MockRoutinesObserver)(nil).RoutineStarted), routine)
}

// RunningRoutineByNameCount mocks base method.
func (m *MockRoutinesObserver) RunningRoutineByNameCount(name string, count int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunningRoutineByNameCount", name, count)
}

// RunningRoutineByNameCount indicates an expected call of RunningRoutineByNameCount.
func (mr *MockRoutinesObserverMockRecorder) RunningRoutineByNameCount(name, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningRoutineByNameCount", reflect.TypeOf((*MockRoutinesObserver)(nil).RunningRoutineByNameCount), name, count)
}

// RunningRoutineCount mocks base method.
func (m *MockRoutinesObserver) RunningRoutineCount(count int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunningRoutineCount", count)
}

// RunningRoutineCount indicates an expected call of RunningRoutineCount.
func (mr *MockRoutinesObserverMockRecorder) RunningRoutineCount(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningRoutineCount", reflect.TypeOf((*MockRoutinesObserver)(nil).RunningRoutineCount), count)
}
